# Hello and welcome to Nana!

# Nana is a simple, dynamically typed, interpreted language.
# It is designed to be easy to learn and use.
# This file will teach you the basics of Nana.
# Let's get started!

# Comments in Nana are start with a hash symbol.
# They can be on their own line or at the end of a line.
# Comments are ignored by the interpreter.

# This is a comment.

### Data Types ###

# Nana has a few basic data types.
# Numbers are written as you would expect.
# At the moment only integers are supported.

123

# Strings are written between double quotes.
# Strings can contain any characters.
# They may even stretch over multiple lines.

"This is a single line string."

"This is a multi line string.
It's worth noting that any indentation will be preserved."

# Lists are written between square brackets.
# Lists can contain any data type.
# The values are separated by whitespace.

[1 2 3]

### Control Structures ###

# For branching, Nana has the Match macro. It is similar to a switch statement
# in other languages, but has a few more features.

# The first argument to Match is the value to match. It can be a literal value,
# or it can be an expression that evaluates to a value, like a variable or a
# function call.

# The second argument to Match is a list with an even number of match cases. The
# first value is a pattern, the second is an expression that will be evaluated
# if the pattern matches the value. The pattern can be a literal value, or an
# underscore. An underscore acts as a wildcard that matches anything.

# This example will give us the ordinal indicator, if provided with the final
# digit of a number:

Match 3
  [1 "st"
   2 "nd"
   3 "rd"
   _ "th"]

# If you'd like to access the value you can bind it to a symbol by using that
# symbol in the pattern. This example will return the number 8:

Match dec(10)
  [result dec(result)]

# This will also work within data structures, and collections. This example will
# pull out the second element of a list:

Match [1 2 3]
  [[_ second _] second]

# You can bind multiple values to the same symbol as long as they are the same.
# This will return the string "Matching pairs":

Match [[1 2] [1 2]] [
  [[a a] [b b]] "Two doubles"
  [[a b] [a b]] "Matching pairs"
   _            "No match"]

### Definitions ###

Def life 42

# TODO: This causes a stack overflow, but rust doesn't show stack traces for
# stack overflows. So first lets properly finish getting Def to work so that we
# can skip this Match binding hackery. Then we can write a function that'll
# recur a hundred times and then panic. That way we'll get a nice deep stack
# trace to look at.
#
# Match deref(Def foo Fn [] foo())
#   [bar bar()]
