# Calls to Unquote are recognised by Quote and evaluated. But Unquote still
# needs to be defined so that the parser hows how many arguments it takes.
Def "Unquote"
  Macro [value]
    value

Def "Defmacro"
  Macro [name args body]
    Quote
      Def Unquote name
        Macro Unquote args Unquote body

Defmacro "Log" [form]
  log(form)

Defmacro "AssertEq" [left right]
  Quote
    Match Unquote right
      [Unquote left :equal
       _             Log ["Assertion failed. Left: " Unquote left
                          " does not equal right: " Unquote right]]

AssertEq :true Unquote :true
AssertEq 42 Unquote add(41 1)

Defmacro "Func" [name args body]
  Quote
    Def Unquote name
      Fn Unquote args Unquote body

Defmacro "Defm" [name args matches]
  Quote
    Func Unquote name Unquote args
      Match Unquote args
        Unquote matches

Defmacro "If" [cond if else]
  Quote
    Match Unquote cond
      [:true  Unquote if
       _      Unquote else]

AssertEq :if   If :true  :if :else
AssertEq :else If :false :if :else
AssertEq :else If :other :if :else

Defmacro "Or" [left right]
  Quote
    If Unquote left
      :true
      If Unquote right
        :true
        :false 

AssertEq :true  Or :true  :true
AssertEq :true  Or :true  :false
AssertEq :true  Or :true  panic()
AssertEq :true  Or :false :true
AssertEq :false Or :false :false
 
Defm or [left right]
  [[:true _] :true
   [_ :true] :true
   _         :false]

AssertEq :true  or(:true  :true)
AssertEq :true  or(:true  :false)
AssertEq :true  or(:false :true)
AssertEq :false or(:false :false)

Defmacro "And" [left right]
  Quote
    If Unquote left
      If Unquote right
        :true
        :false 
      :false

AssertEq :true  And :true  :true
AssertEq :false And :true  :false
AssertEq :false And :false :true
AssertEq :false And :false :false
AssertEq :false And :false panic()

Defm and [left right]
  [[:true :true] :true
    _            :false]

AssertEq :true  and(:true  :true)
AssertEq :false and(:true  :false)
AssertEq :false and(:false :true)
AssertEq :false and(:false :false)

Defm not [bool]
  [[:true]  :false
   [:false] :true]

AssertEq :false not(:true)
AssertEq :true  not(:false)

Func increment [n]
  add(n 1)

AssertEq 2 increment(1)

Func decrement [n]
  subtract(n 1)

AssertEq 0 decrement(1)

## Assertions for builtins ##

AssertEq 3 add(1 2)
AssertEq 1 subtract(2 1)
AssertEq 6 multiply(2 3)
AssertEq 3 divide(6 2)
AssertEq 3 divide(10 3)
AssertEq 1 remainder(10 3)
